package cs3500.set.model.hw03;import org.junit.Test;import java.util.ArrayList;import java.util.List;import cs3500.set.model.hw02.Card;import cs3500.set.model.hw02.Coord;import cs3500.set.model.hw02.Count;import cs3500.set.model.hw02.Filling;import cs3500.set.model.hw02.Shape;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;/** * Test class for the GeneralSetGameModel. */public class GeneralSetGameModelTest {  Coord coord1;  Coord coord2;  Coord coord3;  Coord badCoord1;  Coord badCoord2;  Coord badCoord3;  AbstractSetGameModel game1;  AbstractSetGameModel game2;  List<Card> deckWithSets;  @Test  public void claimSet() {    this.game1 = new GeneralSetGameModel();    this.deckWithSets = new ArrayList<>();    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.DIAMOND));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.OVAL));    deckWithSets.add(new Card(Count.TWO, Filling.FULL, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    this.game1.startGameWithDeck(deckWithSets, 1, 3);    assertEquals(1, this.game1.getHeight());    assertTrue(this.game1.anySetsPresent());    this.game1.claimSet(new Coord(0, 0), new Coord(0, 1),            new Coord(0, 2));    assertEquals(2, this.game1.getHeight());    assertFalse(this.game1.isValidSet(new Coord(0, 0), new Coord(0, 1),            new Coord(0, 2)));    this.game2 = new GeneralSetGameModel();    this.game2.startGameWithDeck(game2.getCompleteDeck(), 3, 4);    assertEquals(this.game2.getHeight(), 3);    assertEquals(this.game2.getWidth(), 4);    this.game2.claimSet(new Coord(0, 0), new Coord(0, 1),            new Coord(0, 2));    assertEquals(3, this.game2.getHeight());  }  /**   * Tests to make sure that when starting a game with no valid sets, it adds rows until it works.   */  @Test  public void startGameWithDeck() {    this.game1 = new GeneralSetGameModel();    this.deckWithSets = new ArrayList<>();    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.DIAMOND));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    deckWithSets.add(new Card(Count.TWO, Filling.FULL, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    this.game1.startGameWithDeck(deckWithSets, 1, 3);    assertEquals(this.game1.getHeight(), 2);    assertTrue(this.game1.anySetsPresent());    assertFalse(this.game1.isValidSet(new Coord(0, 0), new Coord(0, 1),            new Coord(0, 2)));    this.game2 = new GeneralSetGameModel();    this.game2.startGameWithDeck(game2.getCompleteDeck(), 3, 4);    assertEquals(this.game2.getHeight(), 3);    assertEquals(this.game2.getWidth(), 4);  }  /**   * Tests IllegalArgumentException thrown when starting game with deck with negative height for   * GeneralSetGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testNegativeHeightGeneral() {    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), -2, 3);  }  /**   * Tests IllegalArgumentException thrown when starting game with deck with negative width for   * GeneralSetGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testNegativeWidthGeneral() {    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 4, -3);  }  /**   * Tests IllegalArgumentException thrown when starting game with less than three cards for   * GeneralSetGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testLessThanThreeCards() {    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 1, 2);  }  /**   * Tests IllegalArgumentException thrown when starting game with more than the number of cards in   * the deck for GeneralSetGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testNotEnoughCards() {    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 10, 3);  }  /**   * Tests that isValidSet throws IllegalArgumentException when null values are given.   */  @Test(expected = IllegalArgumentException.class)  public void testNullValidSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.isValidSet(null, null, null);    this.game1.isValidSet(coord1, coord2, null);    this.game1.isValidSet(null, null, coord3);    this.game1.isValidSet(null, coord2, null);  }  /**   * Tests that IllegalStateException pops up when using method before game starts.   */  @Test(expected = IllegalStateException.class)  public void testValidSetBeforeGameStarts() {    this.game1 = new GeneralSetGameModel();    this.game1.isValidSet(null, null, null);  }  /**   * Tests isValidSet for coords with invalid values such as negative or too large for the board.   */  @Test(expected = IllegalArgumentException.class)  public void testBadValidSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.badCoord1 = new Coord(-1, 2);    this.badCoord2 = new Coord(2, 5);    this.badCoord3 = new Coord(-3, 5);    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.isValidSet(badCoord1, badCoord2, badCoord3);  }  /**   * Tests claiming a set with null values.   */  @Test(expected = IllegalArgumentException.class)  public void testClaimNullSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.claimSet(null, null, null);    this.game1.claimSet(coord1, null, null);    this.game1.claimSet(null, coord2, null);    this.game1.claimSet(null, null, coord3);  }  /**   * Claims testing valid coordinates but invalid set.   */  @Test(expected = IllegalArgumentException.class)  public void testClaimBadSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.badCoord1 = new Coord(-1, 2);    this.badCoord2 = new Coord(2, 5);    this.badCoord3 = new Coord(-3, 5);    this.game1 = new GeneralSetGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.claimSet(coord1, coord2, coord3);    this.game1.claimSet(badCoord3, coord2, coord3);  }}
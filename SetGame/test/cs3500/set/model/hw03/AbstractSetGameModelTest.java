package cs3500.set.model.hw03;import org.junit.Test;import java.util.ArrayList;import java.util.List;import cs3500.set.model.hw02.Card;import cs3500.set.model.hw02.Coord;import cs3500.set.model.hw02.Count;import cs3500.set.model.hw02.Filling;import cs3500.set.model.hw02.SetThreeGameModel;import cs3500.set.model.hw02.Shape;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;/** * Class to test common methods in the two SetGameModels. */public class AbstractSetGameModelTest {  Card card1;  Card card2;  Coord coord1;  Coord coord2;  Coord coord3;  Coord badCoord1;  Coord badCoord2;  Coord badCoord3;  AbstractSetGameModel game1;  AbstractSetGameModel game2;  AbstractSetGameModel game3;  List<Card> noSetDeck;  List<Card> deckWithSets;  List<Card> fullDeck;  Shape shape1;  Count count1;  Filling filling1;  @Test  public void testAbstractClaimSet() {    /*    Tests SetThreeGameModel     */    this.game1 = new SetThreeGameModel();    this.game1.abstractStartGameWithDeck(game1.getCompleteDeck(), 3, 3);    coord1 = new Coord(0, 0);    coord2 = new Coord(1, 1);    coord3 = new Coord(2, 2);    assertEquals(game1.score, 0);    assertEquals(game1.cardGrid[coord1.row][coord1.col].toString(), "1EO");    assertEquals(game1.cardGrid[coord2.row][coord2.col].toString(), "1SQ");    assertEquals(game1.cardGrid[coord3.row][coord3.col].toString(), "1FD");    this.game1.claimSet(coord1, coord2, coord3);    assertEquals(game1.score, 1);    assertEquals(game1.cardGrid[coord1.row][coord1.col].toString(), "2EO");    assertEquals(game1.cardGrid[coord2.row][coord2.col].toString(), "2EQ");    assertEquals(game1.cardGrid[coord3.row][coord3.col].toString(), "2ED");    //tests that the game is not over    assertFalse(this.game1.gameOver);    this.game1.claimSet(coord1, coord2, coord3);    assertFalse(this.game1.gameOver);    this.game1.claimSet(coord1, coord2, coord3);    assertFalse(this.game1.gameOver);    this.game1.claimSet(coord1, coord2, coord3);    assertFalse(this.game1.gameOver);    this.game1.claimSet(coord1, coord2, coord3);    assertFalse(this.game1.gameOver);    this.game1.claimSet(coord1, coord2, coord3);    assertFalse(this.game1.gameOver);    this.game1.claimSet(coord1, coord2, coord3);    // After 7 claims, the game should be over.    assertTrue(this.game1.gameOver);    /*    Tests GeneralSetGameModel     */    this.game2 = new GeneralSetGameModel();    this.game2.abstractStartGameWithDeck(game2.getCompleteDeck(), 3, 5);    coord1 = new Coord(0, 0);    coord2 = new Coord(0, 1);    coord3 = new Coord(0, 2);    assertEquals(game2.score, 0);    assertEquals(game2.cardGrid[coord1.row][coord1.col].toString(), "1EO");    assertEquals(game2.cardGrid[coord2.row][coord2.col].toString(), "1EQ");    assertEquals(game2.cardGrid[coord3.row][coord3.col].toString(), "1ED");    this.game2.claimSet(coord1, coord2, coord3);    assertEquals(game2.score, 1);    assertEquals(game2.cardGrid[coord1.row][coord1.col].toString(), "2FO");    assertEquals(game2.cardGrid[coord2.row][coord2.col].toString(), "2FQ");    assertEquals(game2.cardGrid[coord3.row][coord3.col].toString(), "2FD");    //tests that the game is not over    assertFalse(this.game2.gameOver);    this.game2.claimSet(coord1, coord2, coord3);    assertFalse(this.game2.gameOver);    this.game2.claimSet(coord1, coord2, coord3);    assertFalse(this.game2.gameOver);    this.game2.claimSet(coord1, coord2, coord3);    assertFalse(this.game2.gameOver);    this.game2.claimSet(coord1, coord2, coord3);    // After 5 claims, the game should be over.    assertTrue(this.game2.gameOver);  }  /**   * Tests abstractStartGameWithDeck() method in AbstractSetGameModel class.   */  @Test  public void testAbstractStartGameWithDeck() {    /*    Tests SetThreeGameModel     */    this.game1 = new SetThreeGameModel();    this.game1.abstractStartGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertEquals(this.game1.getHeight(), 3);    assertEquals(this.game1.getWidth(), 3);    assertEquals(this.game1.getScore(), 0);    assertTrue(this.game1.gameStarted);    /*    Tests GeneralSetGameModel     */    this.game2 = new GeneralSetGameModel();    this.game2.abstractStartGameWithDeck(game2.getCompleteDeck(), 4, 2);    assertEquals(this.game2.getHeight(), 4);    assertEquals(this.game2.getWidth(), 2);    assertEquals(this.game2.getScore(), 0);    assertTrue(this.game2.gameStarted);  }  /**   * Tests getting a card at coord with a row and column being the parameters.   */  @Test  public void testGetCardAtCoordWithIntAndRow() {    /*    Tests SetThreeGameModel     */    this.game1 = new SetThreeGameModel();    this.game1.abstractStartGameWithDeck(game1.getCompleteDeck(), 3, 3);    Card card1 = this.game1.getCardAtCoord(1, 1);    assertEquals("1SQ", card1.toString());    /*    Tests GeneralSetGameModel     */    this.game2 = new GeneralSetGameModel();    this.game2.abstractStartGameWithDeck(game2.getCompleteDeck(), 5, 3);    Card card2 = this.game2.getCardAtCoord(1, 1);    assertEquals("1SQ", card2.toString());  }  /**   * Tests getting a card at coord with a Coord being the parameter.   */  @Test  public void testGetCardAtCoordWithCoord() {    /*    Tests SetThreeGameModel     */    this.game1 = new SetThreeGameModel();    this.game1.abstractStartGameWithDeck(game1.getCompleteDeck(), 3, 3);    Card card1 = this.game1.getCardAtCoord(new Coord(1, 1));    assertEquals("1SQ", card1.toString());    assertEquals(game1.getCardAtCoord(new Coord(2, 1)),            game1.getCardAtCoord(2, 1));    /*    Tests GeneralSetGameModel     */    this.game2 = new GeneralSetGameModel();    this.game2.abstractStartGameWithDeck(game2.getCompleteDeck(), 5, 3);    Card card2 = this.game2.getCardAtCoord(new Coord(1, 1));    assertEquals("1SQ", card2.toString());    assertEquals(game2.getCardAtCoord(new Coord(2, 1)),            game2.getCardAtCoord(2, 1));  }  /**   * Tests the constructor for the AbstractSetGameModel class.   */  @Test  public void testValidConstructionSetThreeGameModel() {    this.game1 = new SetThreeGameModel();    assertEquals(this.game1.score, 0);    assertFalse(this.game1.gameStarted);    assertFalse(this.game1.gameOver);    this.game2 = new GeneralSetGameModel();    assertEquals(this.game2.score, 0);    assertFalse(this.game1.gameStarted);    assertFalse(this.game1.gameOver);  }  /**   * Tests isInvalidCoords() method in AbstractSetGameModel class.   */  @Test  public void testIsInvalidCoords() {    this.game1 = new SetThreeGameModel();    this.game2 = new GeneralSetGameModel();    this.coord1 = new Coord(4, 1);    this.coord2 = new Coord(1, 1);    this.badCoord1 = new Coord(0, 1);    this.badCoord2 = new Coord(1, -2);    assertTrue(this.game1.isInvalidCoords(coord1, coord2, badCoord1));    assertTrue(this.game1.isInvalidCoords(badCoord1, coord2, badCoord2));    assertTrue(this.game1.isInvalidCoords(coord2, coord2, badCoord2));    assertTrue(this.game2.isInvalidCoords(coord1, coord2, badCoord1));    assertTrue(this.game2.isInvalidCoords(badCoord1, coord2, badCoord2));    assertTrue(this.game2.isInvalidCoords(coord2, coord2, badCoord2));  }  /**   * Tests getWidth() method in AbstractSetGameModel class.   */  @Test  public void testGetWidth() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertEquals(this.game1.getWidth(), 3);    this.game2 = new GeneralSetGameModel();    this.game2.startGameWithDeck(game2.getCompleteDeck(), 4, 5);    assertEquals(this.game2.getWidth(), 5);    this.game3 = new GeneralSetGameModel();    this.game3.startGameWithDeck(game3.getCompleteDeck(), 2, 4);    assertEquals(this.game3.getWidth(), 4);  }  /**   * Tests getHeight() method in AbstractSetGameModel class.   */  @Test  public void testGetHeight() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertEquals(this.game1.getHeight(), 3);    this.game2 = new GeneralSetGameModel();    this.game2.startGameWithDeck(game2.getCompleteDeck(), 4, 5);    assertEquals(this.game2.getHeight(), 4);    this.game3 = new GeneralSetGameModel();    this.game3.startGameWithDeck(game3.getCompleteDeck(), 2, 4);    assertEquals(this.game3.getHeight(), 2);  }  /**   * Tests getScore() method in AbstractSetGameModel class.   */  @Test  public void testGetScore() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertEquals(this.game1.getScore(), 0);    this.game1.claimSet(new Coord(0, 0), new Coord(0, 1),            new Coord(0, 2));    assertEquals(this.game1.getScore(), 1);    this.game2 = new GeneralSetGameModel();    this.game2.startGameWithDeck(game2.getCompleteDeck(), 5, 3);    assertEquals(this.game2.getScore(), 0);    this.game2.claimSet(new Coord(0, 0), new Coord(0, 1),            new Coord(0, 2));    assertEquals(this.game2.getScore(), 1);  }  /**   * Tests anySetPresent method in the AbstractSetGameModel class.   */  @Test  public void testAnySetsPresent() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertTrue(this.game1.anySetsPresent());    this.noSetDeck = new ArrayList<>();    noSetDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    noSetDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.OVAL));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    noSetDeck.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    noSetDeck.add(new Card(Count.TWO, Filling.FULL, Shape.OVAL));    noSetDeck.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    noSetDeck.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    this.game2 = new SetThreeGameModel();    this.game2.startGameWithDeck(this.noSetDeck, 3, 3);    assertFalse(this.game2.anySetsPresent());    this.game3 = new GeneralSetGameModel();    this.game3.startGameWithDeck(game3.getCompleteDeck(), 1, 3);    assertTrue(this.game3.anySetsPresent());    this.noSetDeck = new ArrayList<>();    noSetDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    noSetDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.OVAL));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    noSetDeck.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    noSetDeck.add(new Card(Count.TWO, Filling.FULL, Shape.OVAL));    noSetDeck.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    noSetDeck.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    this.game3 = new SetThreeGameModel();    this.game3.startGameWithDeck(this.noSetDeck, 3, 3);    assertFalse(this.game3.anySetsPresent());  }  /**   * Tests isValidSet in the AbstractSetGameModel class.   */  @Test  public void testIsValidSet() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertTrue(this.game1.isValidSet(new Coord(0, 0),            new Coord(0, 1), new Coord(0, 2)));    assertTrue(this.game1.isValidSet(new Coord(1, 0),            new Coord(1, 1), new Coord(1, 2)));    assertTrue(this.game1.isValidSet(new Coord(0, 0),            new Coord(1, 0), new Coord(2, 0)));    assertTrue(this.game1.isValidSet(new Coord(0, 0),            new Coord(1, 1), new Coord(2, 2)));    assertTrue(this.game1.isValidSet(new Coord(1, 0),            new Coord(2, 1), new Coord(0, 2)));    assertFalse(this.game1.isValidSet(new Coord(1, 0),            new Coord(2, 2), new Coord(0, 2)));    assertFalse(this.game1.isValidSet(new Coord(1, 1),            new Coord(2, 2), new Coord(0, 2)));    this.game2 = new GeneralSetGameModel();    this.game2.startGameWithDeck(game1.getCompleteDeck(), 5, 3);    assertTrue(this.game2.isValidSet(new Coord(0, 0),            new Coord(0, 1), new Coord(0, 2)));    assertTrue(this.game2.isValidSet(new Coord(1, 0),            new Coord(1, 1), new Coord(1, 2)));    assertTrue(this.game2.isValidSet(new Coord(0, 0),            new Coord(1, 0), new Coord(2, 0)));    assertTrue(this.game2.isValidSet(new Coord(0, 0),            new Coord(1, 1), new Coord(2, 2)));    assertTrue(this.game2.isValidSet(new Coord(1, 0),            new Coord(2, 1), new Coord(0, 2)));    assertFalse(this.game2.isValidSet(new Coord(1, 0),            new Coord(2, 2), new Coord(0, 2)));    assertFalse(this.game2.isValidSet(new Coord(1, 1),            new Coord(2, 2), new Coord(0, 2)));  }  /**   * Tests the getCardAtCoord method that takes in a row and and col as integers   * in the SetThreeGameModel class.   */  @Test  public void testGetCardAtCoordWithRowAndIntGiven() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertEquals(this.game1.getCardAtCoord(0, 0).toString(), "1EO");    assertEquals(this.game1.getCardAtCoord(0, 1).toString(), "1EQ");    assertEquals(this.game1.getCardAtCoord(2, 1).toString(), "1FQ");  }  /**   * Tests the getCardAtCoord method that takes in coordinate as a Coord   * in the AbstractSetGameModel class.   */  @Test  public void testGetCardAtCoordWithCoordGiven() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(game1.getCompleteDeck(), 3, 3);    assertEquals(this.game1.getCardAtCoord(new Coord(0, 0)).toString(), "1EO");    assertEquals(this.game1.getCardAtCoord(new Coord(0, 1)).toString(), "1EQ");    assertEquals(this.game1.getCardAtCoord(new Coord(2, 1)).toString(), "1FQ");  }  /**   * Tests the isGameOver method in the AbstractSetGameModel class.   */  @Test  public void testIsGameOver() {    this.deckWithSets = new ArrayList<>();    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    deckWithSets.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.OVAL));    deckWithSets.add(new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    deckWithSets.add(new Card(Count.TWO, Filling.FULL, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    deckWithSets.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.deckWithSets, 3, 3);    assertFalse(this.game1.isGameOver());    this.game1.claimSet(new Coord(0, 2),            new Coord(1, 0), new Coord(1, 1));    assertTrue(this.game1.isGameOver());    this.noSetDeck = new ArrayList<>();    noSetDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    noSetDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.OVAL));    noSetDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    noSetDeck.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    noSetDeck.add(new Card(Count.TWO, Filling.FULL, Shape.OVAL));    noSetDeck.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    noSetDeck.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    this.game2 = new SetThreeGameModel();    this.game2.startGameWithDeck(this.noSetDeck, 3, 3);    assertFalse(this.game2.anySetsPresent());    assertFalse(this.game2.isGameOver());    this.game3 = new GeneralSetGameModel();    this.game3.startGameWithDeck(game3.getCompleteDeck(), 3 ,3);    assertTrue(this.game3.anySetsPresent());    assertFalse(this.game3.isGameOver());    Coord coord1 = new Coord(0, 0);    Coord coord2 = new Coord(1, 1);    Coord coord3 = new Coord(2, 2);    for (int i = 0; i < 7; i++) {      assertTrue(this.game3.anySetsPresent());      this.game3.claimSet(coord1, coord2, coord3);    }    assertTrue(this.game3.isGameOver());  }  /**   * Tests getCompleteDeck method in AbstractSetGameModel class.   */  @Test  public void testGetCompleteDeck() {    this.game1 = new SetThreeGameModel();    this.game2 = new GeneralSetGameModel();    this.fullDeck = new ArrayList<>();    this.fullDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.OVAL));    this.fullDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.ONE, Filling.EMPTY, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.ONE, Filling.STRIPED, Shape.OVAL));    this.fullDeck.add(new Card(Count.ONE, Filling.STRIPED, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.ONE, Filling.STRIPED, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.ONE, Filling.FULL, Shape.OVAL));    this.fullDeck.add(new Card(Count.ONE, Filling.FULL, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.ONE, Filling.FULL, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.OVAL));    this.fullDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.TWO, Filling.EMPTY, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.TWO, Filling.STRIPED, Shape.OVAL));    this.fullDeck.add(new Card(Count.TWO, Filling.STRIPED, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.TWO, Filling.STRIPED, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.TWO, Filling.FULL, Shape.OVAL));    this.fullDeck.add(new Card(Count.TWO, Filling.FULL, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.TWO, Filling.FULL, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.THREE, Filling.EMPTY, Shape.OVAL));    this.fullDeck.add(new Card(Count.THREE, Filling.EMPTY, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.THREE, Filling.EMPTY, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.THREE, Filling.STRIPED, Shape.OVAL));    this.fullDeck.add(new Card(Count.THREE, Filling.STRIPED, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.THREE, Filling.STRIPED, Shape.DIAMOND));    this.fullDeck.add(new Card(Count.THREE, Filling.FULL, Shape.OVAL));    this.fullDeck.add(new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE));    this.fullDeck.add(new Card(Count.THREE, Filling.FULL, Shape.DIAMOND));    for (int i = 0; i < 27; i++) {      assertEquals(this.game1.getCompleteDeck().get(i).toString(),              this.fullDeck.get(i).toString());    }    for (int i = 0; i < 27; i++) {      assertEquals(this.game2.getCompleteDeck().get(i).toString(),              this.fullDeck.get(i).toString());    }  }  /**   * Tests IllegalStateExceptions in AbstractSetGameModel class.   */  @Test(expected = IllegalStateException.class)  public void testIllegalStateExceptionForSet() {    this.coord1 = new Coord(2, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.badCoord1 = new Coord(-1, 2);    this.badCoord2 = new Coord(2, 5);    this.game2 = new SetThreeGameModel();    // tests getWidth    this.game2.getWidth();    // tests getHeight    this.game2.getHeight();    // tests getScore    this.game2.getScore();    // tests claimSet    this.game2.claimSet(this.coord1, this.coord2, this.badCoord1);    this.game2.claimSet(this.coord1, this.coord2, this.badCoord2);    this.game2.claimSet(this.coord1, this.badCoord2, this.badCoord1);    this.game2.claimSet(this.badCoord1, this.coord2, this.coord1);    // tests getCardAtCoord (Using a Coord as an input)    this.game2.getCardAtCoord(this.coord1);    this.game2.getCardAtCoord(this.coord2);    // tests getCardAtCoord (Using a row and an int as the input)    this.game2.getCardAtCoord(0, 0);    this.game2.getCardAtCoord(1, 2);    // tests isValidSet    this.game2.isValidSet(coord1, coord2, coord3);    this.game2.isValidSet(badCoord1, coord2, coord3);    // tests anySetsPresent    this.game2.anySetsPresent();  }  /**   * Tests getCount method for Card class.   */  @Test  public void testGetCount() {    this.card1 = new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE);    assertEquals(Count.ONE, this.card1.getCount());    this.card2 = new Card(Count.THREE, Filling.STRIPED, Shape.DIAMOND);    assertEquals(Count.THREE, this.card2.getCount());  }  /**   * Tests getFilling method for Card class.   */  @Test  public void testGetFilling() {    this.card1 = new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE);    assertEquals(Filling.EMPTY, this.card1.getFilling());    this.card2 = new Card(Count.THREE, Filling.STRIPED, Shape.DIAMOND);    assertEquals(Filling.STRIPED, this.card2.getFilling());  }  /**   * Tests getShape method for Card class.   */  @Test  public void testGetShape() {    this.card1 = new Card(Count.ONE, Filling.EMPTY, Shape.SQUIGGLE);    assertEquals(Shape.SQUIGGLE, this.card1.getShape());    this.card2 = new Card(Count.THREE, Filling.STRIPED, Shape.DIAMOND);    assertEquals(Shape.DIAMOND, this.card2.getShape());  }  /**   * Tests Illegal Arguments for Card class. Mainly testing for null values when   * constructing the class.   */  @Test(expected = IllegalArgumentException.class)  public void testIllegalArgumentExceptionForCard() {    this.card1 = new Card(null, Filling.EMPTY, Shape.SQUIGGLE);    this.card2 = new Card(Count.THREE, null, Shape.DIAMOND);  }  /**   * Tests getValue method in Count, Filling, and Shape enum.   */  @Test  public void testGetValue() {    this.count1 = Count.ONE;    this.shape1 = Shape.OVAL;    this.filling1 = Filling.STRIPED;    assertEquals(this.count1.getValue(), 1);    assertEquals(this.shape1.getValue(), "O");    assertEquals(this.filling1.getValue(), "S");  }}
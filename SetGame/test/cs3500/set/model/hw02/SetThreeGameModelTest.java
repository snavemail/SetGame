package cs3500.set.model.hw02;import org.junit.Test;import java.util.ArrayList;import java.util.List;import cs3500.set.model.hw03.AbstractSetGameModel;/** * Class to test SetThreeGameModel tests. */public class SetThreeGameModelTest {  Coord coord1;  Coord coord2;  Coord coord3;  Coord badCoord1;  Coord badCoord2;  Coord badCoord3;  AbstractSetGameModel game1;  List<Card> noSetDeck;  /**   * Tests IllegalArgumentException thrown when starting game with deck with invalid height for   * SetThreeGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testBadHeightThree() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 2, 3);  }  /**   * Tests IllegalArgumentException thrown when starting game with deck with invalid width for   * SetThreeGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testBadWidthThree() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 4);  }  /**   * Tests IllegalArgumentException thrown when starting game with deck with negative height for   * SetThreeGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testNegBadHeightThree() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), -2, 3);  }  /**   * Tests IllegalArgumentException thrown when starting game with deck with negative width for   * SetThreeGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testNegBadWidthThree() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, -4);  }  /**   * Tests IllegalArgumentException thrown when starting game with deck with not enough cards for   * SetThreeGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testBadDeck() {    this.noSetDeck = new ArrayList<>();    this.noSetDeck.add(new Card(Count.THREE, Filling.STRIPED, Shape.OVAL));    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.noSetDeck, 3, 3);  }  /**   * Tests IllegalArgumentException thrown when starting game with null deck for   * SetThreeGameModel.   */  @Test(expected = IllegalArgumentException.class)  public void testNullDeck() {    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(null, 3, 3);  }  /**   * Tests that isValidSet throws IllegalArgumentException when null values are given.   */  @Test(expected = IllegalArgumentException.class)  public void testNullValidSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.isValidSet(null, null, null);    this.game1.isValidSet(coord1, coord2, null);    this.game1.isValidSet(null, null, coord3);    this.game1.isValidSet(null, coord2, null);  }  /**   * Tests that IllegalStateException pops up when using method before game starts.   */  @Test(expected = IllegalStateException.class)  public void testValidSetBeforeGameStarts() {    this.game1 = new SetThreeGameModel();    this.game1.isValidSet(null, null, null);  }  /**   * Tests isValidSet for coords with invalid values such as negative or too large for the board.   */  @Test(expected = IllegalArgumentException.class)  public void testBadValidSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.badCoord1 = new Coord(-1, 2);    this.badCoord2 = new Coord(2, 5);    this.badCoord3 = new Coord(-3, 5);    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.isValidSet(badCoord1, badCoord2, badCoord3);  }  /**   * Tests claiming a set with null values.   */  @Test(expected = IllegalArgumentException.class)  public void testClaimNullSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.claimSet(null, null, null);    this.game1.claimSet(coord1, null, null);    this.game1.claimSet(null, coord2, null);    this.game1.claimSet(null, null, coord3);  }  /**   * Claims testing valid coordinates but invalid set.   */  @Test(expected = IllegalArgumentException.class)  public void testClaimBadSet() {    this.coord1 = new Coord(1, 0);    this.coord2 = new Coord(0, 1);    this.coord3 = new Coord(1, 1);    this.badCoord1 = new Coord(-1, 2);    this.badCoord2 = new Coord(2, 5);    this.badCoord3 = new Coord(-3, 5);    this.game1 = new SetThreeGameModel();    this.game1.startGameWithDeck(this.game1.getCompleteDeck(), 3, 3);    this.game1.claimSet(coord1, coord2, coord3);    this.game1.claimSet(badCoord3, coord2, coord3);  }}
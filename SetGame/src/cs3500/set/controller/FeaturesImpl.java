package cs3500.set.controller;import cs3500.set.model.hw02.Card;import cs3500.set.model.hw02.Coord;import cs3500.set.model.hw02.SetGameModel;import cs3500.set.view.SetGameGuiView;/** * Represents the controller for the game of Set. */public class FeaturesImpl implements FeaturesInterface {  private final SetGameModel<Card> model;  private final SetGameGuiView view;  /**   * Constructs a controller for the game of Set.   *   * @param model represents the model that the game should be based on.   * @param view  represents the view that the game should be based on.   */  public FeaturesImpl(SetGameModel<Card> model, SetGameGuiView view) {    this.model = model;    this.view = view;  }  /**   * Plays the game by asking for a series of integers for rows and values that gets parsed into   * the game to render the board, and calculate valid sets.   *   * @throws IllegalStateException when the   */  @Override  public void playGame() throws IllegalStateException {    boolean gameOver = false;    boolean gameStarted = false;    // Starts the game if it has not been quit or if the game is not over.    while (!gameOver) {      if (!gameStarted) {        model.startGameWithDeck(model.getCompleteDeck(), 3, 3);        gameStarted = true;      }      if (model.isGameOver()) {        gameOver = true;      }    }  }  /**   * Takes in the row and column of the card that was clicked and adds it to the list of   * cards to be claimed.   *   * @param row represents the row of the card that was clicked.   * @param col represents the column of the card that was clicked.   */  @Override  public void input(int row, int col) {    try {      Coord coord = new Coord(row, col);      model.addToClaimsList(coord);      view.refresh();      if (model.enoughCardsToClaim()) {        Coord coord1 = model.getCoord(0, model.getClaimsList());        Coord coord2 = model.getCoord(1, model.getClaimsList());        Coord coord3 = model.getCoord(2, model.getClaimsList());        System.out.println("3 Coords: " + coord1 + " " + coord2 + " " + coord3);        try {          model.claimSet(coord1, coord2, coord3);          if (model.isGameOver()) {            view.renderMessage("Game Over");            System.out.println("Game Over");            return;          }          view.refresh();          System.out.println("Set claimed");          model.removeCardsToClaim();        } catch (IllegalArgumentException e) {          view.renderMessage(e.getMessage());          model.removeCardsToClaim();        }      }    } catch (IllegalArgumentException e) {      view.renderMessage(e.getMessage());    }  }  /**   * Takes in the row and column of the card that was clicked and adds it to the list of cards   * to be claimed.   *   * @param coord represents the row and column of the card that was clicked.   */  @Override  public void input(Coord coord) {    input(coord.getRow(), coord.getCol());  }}
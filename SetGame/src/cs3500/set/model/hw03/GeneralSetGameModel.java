package cs3500.set.model.hw03;import java.util.List;import cs3500.set.model.hw02.Card;import cs3500.set.model.hw02.Coord;/** * Class for the SetGameModel that can take in any inputs for width and height. */public class GeneralSetGameModel extends AbstractSetGameModel {  /**   * If there is no valid set on the board at the start, the game will   * continuously add rows of cards until there are not enough cards in the deck, or until   * there is a set present.   *   * @param coord1 the coordinates of the first card   * @param coord2 the coordinates of the second card   * @param coord3 the coordinates of the third card   * @throws IllegalArgumentException if any of the coordinates are invalid for the particular   *                                  implementation of Set OR the cards at   *                                  those coordinates do not form a set   * @throws IllegalStateException    if the game has not started or the game has already ended   */  @Override  public void claimSet(Coord coord1, Coord coord2, Coord coord3) throws IllegalArgumentException,          IllegalStateException {    abstractClaimSet(coord1, coord2, coord3);    if (!this.gameOver) {      this.addCards();    }  }  /**   * Begins the game using the cards given by the deck creates a grid specified   * by the height and width parameters.   * Specifically, the model deals the cards onto the board from left to right and top to bottom,   * filling the grid.   * If there is no valid set on the board at the start, the game will   * continuously add rows of cards until there are not enough cards in the deck, or until   * there is a set present.   *   * @param deck   the list of cards in the order they will be played   * @param height the height of the board for this game   * @param width  the width of the board for this game   * @throws IllegalArgumentException if the deck does not have enough cards to deal to the grid   *                                  OR the deck is null   *                                  OR the width/height are negative   *                                  or there are less than 3 cards dealt.   */  @Override  public void startGameWithDeck(List<Card> deck, int height, int width)          throws IllegalArgumentException {    if (height * width < 3) {      throw new IllegalArgumentException("Given width and height cannot hold at least 3 cards");    }    if (height <= 0 || width <= 0) {      throw new IllegalArgumentException("Height and width cannot be less than 1");    }    if (deck == null) {      throw new IllegalArgumentException("Deck cannot be null");    }    if (deck.size() < height * width) {      throw new IllegalArgumentException("Deck size is not big enough to start game");    }    abstractStartGameWithDeck(deck, height, width);    this.addCards();  }  /**   * Adds cards to the grid until there is a set as long as there are enough cards in the deck.   */  private void addCards() {    while (!this.anySetsPresent() && this.deck.size() >= this.getHeight()) {      if (this.deck.size() >= this.getWidth()) {        int numRows = cardGrid.length;        int numCols = cardGrid[0].length;        Card[][] newGrid = new Card[numRows + 1][numCols];        for (int i = 0; i < numRows; i++) {          System.arraycopy(cardGrid[i], 0, newGrid[i], 0, numCols);        }        this.cardGrid = newGrid;        for (int j = 0; j < numCols; j++) {          cardGrid[numRows][j] = deck.get(0);          deck.remove(0);        }      }      this.height++;    }  }}
package cs3500.set.model.hw02;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Objects;/** * Mock class that implements {@code SetGameModel<Card>} to test that the height and width inputted * match what is intended. */public class ConfirmHeightAndWidthModel implements SetGameModel<Card> {  final StringBuilder log;  final List<Card> cards;  /**   * Constructor for this mock model that creates a list of cards to play the game and sets a   * StringBuilder to use for testing purposes.   *   * @param log represents the appendable that will be used to test the inputs by the player.   */  public ConfirmHeightAndWidthModel(StringBuilder log) {    cards = new ArrayList<Card>(Arrays.asList(            new Card(Count.THREE, Filling.FULL, Shape.OVAL),            new Card(Count.THREE, Filling.STRIPED, Shape.SQUIGGLE),            new Card(Count.THREE, Filling.EMPTY, Shape.SQUIGGLE),            new Card(Count.ONE, Filling.EMPTY, Shape.OVAL),            new Card(Count.ONE, Filling.FULL, Shape.SQUIGGLE),            new Card(Count.ONE, Filling.STRIPED, Shape.OVAL),            new Card(Count.TWO, Filling.STRIPED, Shape.OVAL),            new Card(Count.TWO, Filling.STRIPED, Shape.DIAMOND),            new Card(Count.TWO, Filling.FULL, Shape.DIAMOND),            new Card(Count.THREE, Filling.FULL, Shape.DIAMOND),            new Card(Count.ONE, Filling.FULL, Shape.OVAL),            new Card(Count.THREE, Filling.FULL, Shape.SQUIGGLE)));    this.log = Objects.requireNonNull(log);  }  @Override  public void addToClaimsList(Coord coord) {    /* Empty because in this mock we don't need this method. */  }  @Override  public boolean enoughCardsToClaim() {    return false;  }  @Override  public void removeCardsToClaim() {    /* Empty because in this mock we don't need this method. */  }  @Override  public Coord getCoord(int index, List<Coord> deck) {    return null;  }  @Override  public List<Coord> getClaimsList() {    return null;  }  /**   * We can ignore this method because the mock model implements this method. But we will never   * use this method, so it can be left blank.   *   * @param coord1 the coordinates of the first card   * @param coord2 the coordinates of the second card   * @param coord3 the coordinates of the third card   */  @Override  public void claimSet(Coord coord1, Coord coord2, Coord coord3) {    /* Empty because in this mock we don't need this method. */  }  @Override  public void startGameWithDeck(List<Card> deck, int height, int width)          throws IllegalArgumentException {    log.append("height = ").append(height).append("\nwidth = ").append(width);  }  @Override  public int getWidth() throws IllegalStateException {    return 3;  }  @Override  public int getHeight() throws IllegalStateException {    return 3;  }  @Override  public int getScore() throws IllegalStateException {    return 0;  }  @Override  public boolean anySetsPresent() {    return false;  }  @Override  public boolean isValidSet(Coord coord1, Coord coord2, Coord coord3)          throws IllegalArgumentException {    return false;  }  @Override  public Card getCardAtCoord(int row, int col) {    return null;  }  @Override  public Card getCardAtCoord(Coord coord) {    return null;  }  @Override  public boolean isGameOver() {    return false;  }  @Override  public List<Card> getCompleteDeck() {    return null;  }}